{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "phg-uat-datafactory"
		},
		"Control_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Control'"
		},
		"DataLake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLake'"
		},
		"Dataverse_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'Dataverse'"
		},
		"SqlServer_OnPrem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_OnPrem'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName}"
		},
		"SqlServer_OnPrem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer_OnPrem'"
		},
		"DataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://phguatstoragedatalake.dfs.core.windows.net/"
		},
		"Dataverse_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "143b4812-f858-4366-8d81-b02b63ff26ca"
		},
		"BBP-Pro2SQL-01_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/83e38fc3-11f8-44f0-87d5-048acb1450dc/resourcegroups/PHG-Intergration/providers/Microsoft.DataFactory/factories/phg-eval-datafactory/integrationruntimes/BBP-Pro2SQL-01"
		},
		"SqlServer_OnPrem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "groupict\\stuart.mcnicholas"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Control')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Control_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataverse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://phg-uat.crm11.dynamics.com/",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalId": "[parameters('Dataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('Dataverse_servicePrincipalCredential')]"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIR-TTL')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 30,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BBP-Pro2SQL-01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('BBP-Pro2SQL-01_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited_Reference')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_code",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					},
					{
						"name": "destination",
						"type": "String"
					},
					{
						"name": "phg_waterloocode",
						"type": "String"
					},
					{
						"name": "phg_fortiscode",
						"type": "String"
					},
					{
						"name": "modified",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					},
					{
						"name": "statecode",
						"type": "String"
					},
					{
						"name": "statuscode",
						"type": "String"
					},
					{
						"name": "phg_checksum",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited_Reference_Vulnerability')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_code",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					},
					{
						"name": "destination",
						"type": "String"
					},
					{
						"name": "phg_waterloocode",
						"type": "String"
					},
					{
						"name": "phg_fortiscode",
						"type": "String"
					},
					{
						"name": "phg_category",
						"type": "String"
					},
					{
						"name": "modified",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					},
					{
						"name": "statecode",
						"type": "String"
					},
					{
						"name": "statuscode",
						"type": "String"
					},
					{
						"name": "phg_checksum",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Dataverse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"EntityName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": {
						"value": "@dataset().EntityName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel_LocalAuthorities')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "data-sync"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "OH_D365_DataSync/Config"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "LocalAuthorities_F.xlsx"
					}
				},
				"folder": {
					"name": "DataLake/Config"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "LocalAuthorities",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "SourceSystem",
						"type": "String"
					},
					{
						"name": "SourceSchema",
						"type": "String"
					},
					{
						"name": "SourceTable",
						"type": "String"
					},
					{
						"name": "SourceCode",
						"type": "String"
					},
					{
						"name": "Entity",
						"type": "String"
					},
					{
						"name": "EntityQualifiedName",
						"type": "String"
					},
					{
						"name": "EntityCode",
						"type": "String"
					},
					{
						"name": "EntityValue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel_ReferenceEntityCodeMap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "data-sync"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "OH_D365_DataSync/Config"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "ReferenceEntityCodeMap.xlsx"
					}
				},
				"folder": {
					"name": "DataLake/Config"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ReferenceEntityCodeMap",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "SourceSystem",
						"type": "String"
					},
					{
						"name": "SourceSchema",
						"type": "String"
					},
					{
						"name": "SourceTable",
						"type": "String"
					},
					{
						"name": "SourceCode",
						"type": "String"
					},
					{
						"name": "Entity",
						"type": "String"
					},
					{
						"name": "EntityQualifiedName",
						"type": "String"
					},
					{
						"name": "EntityCode",
						"type": "String"
					},
					{
						"name": "EntityValue",
						"type": "String"
					},
					{
						"name": "WaterlooCode",
						"type": "String"
					},
					{
						"name": "FortisCode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Control",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Control_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Control",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_OnPrem_connectionString')]",
					"userName": "[parameters('SqlServer_OnPrem_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer_OnPrem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "BBP-Pro2SQL-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/BBP-Pro2SQL-01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DailyLoad_Post')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PipelineAuditLog - Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Post Daily Load - Checksum",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[d365].[spUpdate_PostDailyLoad_Checksum]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[-]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-20T17:01:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FullLoad_Post')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PipelineAuditLog - Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Post Full Load - Checksum",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[d365].[spUpdate_PostFullLoad_Checksum]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[-]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-20T17:01:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_OnPrem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_OnPrem_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_OnPrem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "co_parish"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DeleteEntityData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "DeletionData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Dataverse",
								"type": "DatasetReference"
							},
							"name": "SinkDelete"
						}
					],
					"transformations": [
						{
							"name": "AlterRowProperty"
						},
						{
							"name": "SelectColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Entity as string,",
						"          phg_integrationkey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeletionData",
						"SelectColumn alterRow(deleteIf(true())) ~> AlterRowProperty",
						"DeletionData select(mapColumn(",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumn",
						"AlterRowProperty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     alternateKeyName: 'phg_integrationkey',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0) ~> SinkDelete"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CoreEntities_A')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Core_A_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_A"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Core_A_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Core_A_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Script - Entity RowCount",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "Succeeded",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": {
																"value": "@activity('Script - Entity RowCount').output.outputParameters.RowCount",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Script - Entity RowCount",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().srcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().srcDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "RowCount",
																	"type": "Int32",
																	"value": null,
																	"direction": "Output"
																}
															],
															"type": "Query",
															"text": {
																"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Switch Entity",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Account",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Account",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"logSettings": {
																			"enableCopyActivityLog": true,
																			"copyActivityLogSettings": {
																				"logLevel": "Warning",
																				"enableReliableLogging": true
																			},
																			"logLocationSettings": {
																				"linkedServiceName": {
																					"referenceName": "DataLake",
																					"type": "LinkedServiceReference"
																				},
																				"path": {
																					"value": "@concat('data-sync/OH_D365_DataSync/Logs/',item().SrcSystem,'/Core_A')",
																					"type": "Expression"
																				}
																			}
																		},
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "accountnumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "accountnumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_city",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_city",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_county",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_county",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_fax",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_fax",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_line1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_line1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_line2",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_line2",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_line3",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_line3",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_postalcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_postalcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_primarycontactname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_primarycontactname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_telephone1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_telephone1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "creditlimit",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "creditlimit",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "description",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "description",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "emailaddress1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "emailaddress1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "fax",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "fax",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "numberofemployees",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "numberofemployees",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "telephone1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "telephone1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "transactioncurrencyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "transactioncurrencyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "customertypecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "customertypecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "accountcategorycode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "accountcategorycode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_addresstypecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "address1_addresstypecode",
																						"type": "Int32"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Account",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Account",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType\n",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Account",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Account",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spInsert_PipelineAuditDetailLog]",
																		"storedProcedureParameters": {
																			"dtCopyActivity_EndTime": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"dtCopyActivity_StartTime": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].start}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"dtTriggerTime": {
																				"value": {
																					"value": "@{pipeline().TriggerTime}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"intCopyActivity_Stage": {
																				"value": "2",
																				"type": "Int32"
																			},
																			"intParallelCopies": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.usedParallelCopies}",
																					"type": "Expression"
																				},
																				"type": "Int32"
																			},
																			"intRowsCopied": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.rowsCopied}",
																					"type": "Expression"
																				},
																				"type": "Int32"
																			},
																			"intRowsRead": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.rowsRead}",
																					"type": "Expression"
																				},
																				"type": "Int32"
																			},
																			"intRowsSkipped": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.rowsSkipped}",
																					"type": "Expression"
																				},
																				"type": "Int32"
																			},
																			"intSequenceGroup": {
																				"value": {
																					"value": "@{pipeline().parameters.SequenceGroup}",
																					"type": "Expression"
																				},
																				"type": "Int32"
																			},
																			"strCopyActivity": {
																				"value": "Trfd_to_Dest - Account",
																				"type": "String"
																			},
																			"strCopyActivity_QueuingDuration_SS": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].detailedDurations.queuingDuration}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strCopyActivity_TimeToFirstByte_SS": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].detailedDurations.queuingDuration}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strCopyActivity_TransferDuration_SS": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].detailedDurations.transferDuration}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strCopyDuration_SS": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.copyDuration}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strDataFactory": {
																				"value": {
																					"value": "@{pipeline().DataFactory}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strDestination": {
																				"value": {
																					"value": "@{item().DestEntity}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEffectiveIntegrationRuntime": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.effectiveIntegrationRuntime}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strExecutionStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strPipeline": {
																				"value": {
																					"value": "@{pipeline().Pipeline}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSinkType": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].sink.type}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSource": {
																				"value": {
																					"value": "@{item().SrcStoredProcedure}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceType": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].source.type}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSrcSystem": {
																				"value": {
																					"value": "@{item().SrcSystem}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strTriggerName": {
																				"value": {
																					"value": "@{pipeline().TriggerName}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strTriggerType": {
																				"value": {
																					"value": "@{pipeline().TriggerType}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"uniqRunID": {
																				"value": {
																					"value": "@{pipeline().RunId}",
																					"type": "Expression"
																				},
																				"type": "Guid"
																			},
																			"uniqTriggerID": {
																				"value": {
																					"value": "@{pipeline().TriggerId}",
																					"type": "Expression"
																				},
																				"type": "Guid"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																}
															]
														}
													]
												}
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Destination to Config",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Switch Entity",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "CommonDataServiceForAppsSource",
														"query": {
															"value": "@item().FetchXML",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "upsert",
														"upsertSettings": {
															"useTempDB": true,
															"keys": [
																"phg_integrationkey"
															]
														},
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": false
												},
												"inputs": [
													{
														"referenceName": "DS_Dataverse",
														"type": "DatasetReference",
														"parameters": {
															"EntityName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": "d365",
															"TableName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "AuditLog",
												"description": "exec [spInsert_Core_A_AuditLog]",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Destination to Config",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[spInsert_AuditLog]",
													"storedProcedureParameters": {
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().SrcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().SrcDatabase",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spInsert_PipelineAuditDetailLog]",
													"storedProcedureParameters": {
														"dtCopyActivity_EndTime": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"dtCopyActivity_StartTime": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].start}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"dtTriggerTime": {
															"value": {
																"value": "@{pipeline().TriggerTime}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"intCopyActivity_Stage": {
															"value": "1",
															"type": "Int32"
														},
														"intParallelCopies": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.usedParallelCopies}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intRowsCopied": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.rowsCopied}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intRowsRead": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.rowsRead}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intRowsSkipped": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.rowsSkipped}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intSequenceGroup": {
															"value": {
																"value": "@{pipeline().parameters.SequenceGroup}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"strCopyActivity": {
															"value": "Staging to Transformed",
															"type": "String"
														},
														"strCopyActivity_QueuingDuration_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strCopyActivity_TimeToFirstByte_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strCopyActivity_TransferDuration_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strCopyDuration_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.copyDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strDataFactory": {
															"value": {
																"value": "@{pipeline().DataFactory}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strDestination": {
															"value": {
																"value": "@{item().DestEntity}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEffectiveIntegrationRuntime": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strExecutionStatus": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].status}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strPipeline": {
															"value": {
																"value": "@{pipeline().Pipeline}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSinkType": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].sink.type}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSource": {
															"value": {
																"value": "@{item().SrcStoredProcedure}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceType": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].source.type}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSrcSystem": {
															"value": {
																"value": "@{item().SrcSystem}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strTriggerName": {
															"value": {
																"value": "@{pipeline().TriggerName}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strTriggerType": {
															"value": {
																"value": "@{pipeline().TriggerType}",
																"type": "Expression"
															},
															"type": "String"
														},
														"uniqRunID": {
															"value": {
																"value": "@{pipeline().RunId}",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"uniqTriggerID": {
															"value": {
																"value": "@{pipeline().TriggerId}",
																"type": "Expression"
															},
															"type": "Guid"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "PipelineAuditDetailLog_3",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Destination to Config",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spInsert_PipelineAuditDetailLog]",
													"storedProcedureParameters": {
														"dtCopyActivity_EndTime": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"dtCopyActivity_StartTime": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].start}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"dtTriggerTime": {
															"value": {
																"value": "@{pipeline().TriggerTime}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"intCopyActivity_Stage": {
															"value": "3",
															"type": "Int32"
														},
														"intParallelCopies": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.usedParallelCopies}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intRowsCopied": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.rowsCopied}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intRowsRead": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.rowsRead}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"intRowsSkipped": {
															"value": "0",
															"type": "Int32"
														},
														"intSequenceGroup": {
															"value": {
																"value": "@{pipeline().parameters.SequenceGroup}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"strCopyActivity": {
															"value": "Destination to Config",
															"type": "String"
														},
														"strCopyActivity_QueuingDuration_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strCopyActivity_TimeToFirstByte_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strCopyActivity_TransferDuration_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strCopyDuration_SS": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.copyDuration}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strDataFactory": {
															"value": {
																"value": "@{pipeline().DataFactory}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strDestination": {
															"value": {
																"value": "@{item().DestEntity}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEffectiveIntegrationRuntime": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strExecutionStatus": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].status}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strPipeline": {
															"value": {
																"value": "@{pipeline().Pipeline}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSinkType": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].sink.type}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSource": {
															"value": {
																"value": "@{item().SrcStoredProcedure}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceType": {
															"value": {
																"value": "@{activity('Staging to Transformed').output.executionDetails[0].source.type}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSrcSystem": {
															"value": {
																"value": "@{item().SrcSystem}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strTriggerName": {
															"value": {
																"value": "@{pipeline().TriggerName}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strTriggerType": {
															"value": {
																"value": "@{pipeline().TriggerType}",
																"type": "Expression"
															},
															"type": "String"
														},
														"uniqRunID": {
															"value": {
																"value": "@{pipeline().RunId}",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"uniqTriggerID": {
															"value": {
																"value": "@{pipeline().TriggerId}",
																"type": "Expression"
															},
															"type": "Guid"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "Datetime",
													"value": {
														"value": "@item().LastSuccessfulPipelineRunStart",
														"type": "Expression"
													}
												},
												"strLoadType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spInsert_PipelineAuditDetailLog]",
										"storedProcedureParameters": {
											"dtCopyActivity_EndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"dtCopyActivity_StartTime": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].start}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"dtTriggerTime": {
												"value": {
													"value": "@{pipeline().TriggerTime}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"intCopyActivity_Stage": {
												"value": "0",
												"type": "Int32"
											},
											"intParallelCopies": {
												"value": {
													"value": "@{activity('OH to Staging').output.usedParallelCopies}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"intRowsCopied": {
												"value": {
													"value": "@{activity('OH to Staging').output.rowsCopied}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"intRowsRead": {
												"value": {
													"value": "@{activity('OH to Staging').output.rowsRead}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"intRowsSkipped": {
												"value": {
													"value": "@{activity('OH to Staging').output.rowsSkipped}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"intSequenceGroup": {
												"value": {
													"value": "@{pipeline().parameters.SequenceGroup}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"strCopyActivity": {
												"value": "OH to Staging",
												"type": "String"
											},
											"strCopyActivity_QueuingDuration_SS": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strCopyActivity_TimeToFirstByte_SS": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strCopyActivity_TransferDuration_SS": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strCopyDuration_SS": {
												"value": {
													"value": "@{activity('OH to Staging').output.copyDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strDataFactory": {
												"value": {
													"value": "@{pipeline().DataFactory}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strDestination": {
												"value": {
													"value": "@{item().DestEntity}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEffectiveIntegrationRuntime": {
												"value": {
													"value": "@{activity('OH to Staging').output.effectiveIntegrationRuntime}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strExecutionStatus": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strPipeline": {
												"value": {
													"value": "@{pipeline().Pipeline}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSinkType": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].sink.type}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSource": {
												"value": {
													"value": "@{item().SrcStoredProcedure}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceType": {
												"value": {
													"value": "@{activity('OH to Staging').output.executionDetails[0].source.type}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSrcSystem": {
												"value": {
													"value": "@{item().SrcSystem}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strTriggerName": {
												"value": {
													"value": "@{pipeline().TriggerName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"strTriggerType": {
												"value": {
													"value": "@{pipeline().TriggerType}",
													"type": "Expression"
												},
												"type": "String"
											},
											"uniqRunID": {
												"value": {
													"value": "@{pipeline().RunId}",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"uniqTriggerID": {
												"value": {
													"value": "@{pipeline().TriggerId}",
													"type": "Expression"
												},
												"type": "Guid"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[C]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]",
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		}
	]
}