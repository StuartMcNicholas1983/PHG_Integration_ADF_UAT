{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "phg-uat-datafactory"
		},
		"Control_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Control'"
		},
		"DataLake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLake'"
		},
		"Dataverse_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'Dataverse'"
		},
		"SqlServer_OnPrem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_OnPrem'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName}"
		},
		"SqlServer_OnPrem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer_OnPrem'"
		},
		"DataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://phguatstoragedatalake.dfs.core.windows.net/"
		},
		"Dataverse_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "1bafd450-9ac7-4646-b5d1-7dd54a8a6502"
		},
		"SqlServer_OnPrem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "groupict\\stuart.mcnicholas"
		},
		"TRG_S_4am_Daily_properties_PL_Control_parameters_PipelineName": {
			"type": "string",
			"defaultValue": "OH_D365_DataSync"
		},
		"TRG_S_4am_Daily_properties_PL_Control_parameters_SequenceList": {
			"type": "string",
			"defaultValue": "[[L],[R],[C],[T]"
		},
		"TRG_S_4am_Daily_properties_PL_Control_parameters_LoadType": {
			"type": "string",
			"defaultValue": "Daily"
		},
		"TRG_S_7am_to_5pm_Incremental_properties_PL_Control_parameters_PipelineName": {
			"type": "string",
			"defaultValue": "OH_D365_DataSync"
		},
		"TRG_S_7am_to_5pm_Incremental_properties_PL_Control_parameters_SequenceList": {
			"type": "string",
			"defaultValue": "[[C],[T]"
		},
		"TRG_S_7am_to_5pm_Incremental_properties_PL_Control_parameters_LoadType": {
			"type": "string",
			"defaultValue": "Incremental"
		},
		"TRG_S_8pm_Incremental_properties_PL_Control_parameters_PipelineName": {
			"type": "string",
			"defaultValue": "OH_D365_DataSync"
		},
		"TRG_S_8pm_Incremental_properties_PL_Control_parameters_SequenceList": {
			"type": "string",
			"defaultValue": "[[D],[I]"
		},
		"TRG_S_8pm_Incremental_properties_PL_Control_parameters_LoadType": {
			"type": "string",
			"defaultValue": "Incremental"
		},
		"BBP-Pro2SQL-01_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/83e38fc3-11f8-44f0-87d5-048acb1450dc/resourcegroups/PHG-Intergration/providers/Microsoft.DataFactory/factories/phg-eval-datafactory/integrationruntimes/BBP-Pro2SQL-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Control')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SG - Reference",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Lookup",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SG - Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Reference"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[R]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Reference",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Reference",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Reference').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Reference Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ReferenceEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SG - Core_A",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Reference",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SG - Reference",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_A"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[C]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Core_A",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Core_A",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Core_A').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Core Entities_A",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_CoreEntities_A",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Core A - AuditLog",
									"description": "exec [spInsert_Core_A_AuditLog]",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Core Entities_A",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[spInsert_Core_A_AuditLog]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SG - Lookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PipelineAuditLog - Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Lookup"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[L]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Lookup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Lookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Lookup Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_LookupEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SG - Delete",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Transactional",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SG - Transactional",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Delete"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[D]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Delete",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Delete').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Delete Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_DeleteEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SG - Transactional",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Core_C",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SG - Core_C",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Transactional"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[T]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Transactional",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Transactional",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Transactional').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Transactional Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_TransactionalEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LoadType2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SG - Core_B",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Core_A",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SG - Core_A",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_B"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[C]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Core_B",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Core_B",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Core_B').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Core_B Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_CoreEntities_B",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Core B - AuditLog",
									"description": "exec [spInsert_Core_B_AuditLog]",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Core_B Entities",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[spInsert_Core_B_AuditLog]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SG - Core_C",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Core_B",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SG - Core_B",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_C"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[C]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Core_C",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Core_C",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Core_C').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Core_C Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_CoreEntities_C",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Core C - AuditLog",
									"description": "exec [spInsert_Core_C_AuditLog]",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Core_C Entities",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[spInsert_Core_C_AuditLog]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LoadType",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.LoadType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Full",
									"activities": [
										{
											"name": "Full Load Reset",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_FullLoadReset",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineName": {
														"value": "@pipeline().parameters.PipelineName",
														"type": "Expression"
													},
													"LoadType": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Incremental",
									"activities": [
										{
											"name": "Control - Reset PipelineRunsToday - Incremental",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_PipelineRunsToday]"
											},
											"linkedServiceName": {
												"referenceName": "Control",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Daily",
									"activities": [
										{
											"name": "Daily Reset",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_DailyReset",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineName": {
														"value": "@pipeline().parameters.PipelineName",
														"type": "Expression"
													},
													"LoadType": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Entity Duplicates",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Daily Reset",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EntityDuplicates",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineName": {
														"value": "@pipeline().parameters.PipelineName",
														"type": "Expression"
													},
													"LoadType": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": {
										"value": "@pipeline().parameters.SequenceList",
										"type": "Expression"
									},
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SG - Inactive",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Delete",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SG - Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Inactive"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"isSequence": {
										"type": "Boolean",
										"value": {
											"value": "@greaterOrEquals(indexOf(pipeline().parameters.SequenceList,'[I]'),0)\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Inactive",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SG - Inactive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SG - Inactive').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inactive Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_InactiveEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											},
											"LoadType": {
												"value": "@pipeline().parameters.LoadType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LoadType2",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Inactive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.LoadType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Full",
									"activities": [
										{
											"name": "Full Load Reset - Post",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_FullLoadReset_Post",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"PipelineName": {
														"value": "@pipeline().parameters.PipelineName",
														"type": "Expression"
													},
													"LoadType": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string",
						"defaultValue": "OH_D365_DataSync"
					},
					"SequenceList": {
						"type": "string",
						"defaultValue": "[[L],[R],[C],[T],[D],[I]"
					},
					"LoadType": {
						"type": "string",
						"defaultValue": "Full,Incremental,Daily"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ReferenceEntities')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CoreEntities_A')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/pipelines/PL_LookupEntities')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DeleteEntities')]",
				"[concat(variables('factoryId'), '/pipelines/PL_TransactionalEntities')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CoreEntities_B')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CoreEntities_C')]",
				"[concat(variables('factoryId'), '/pipelines/PL_InactiveEntities')]",
				"[concat(variables('factoryId'), '/pipelines/PL_FullLoadReset')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DailyReset')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EntityDuplicates')]",
				"[concat(variables('factoryId'), '/pipelines/PL_FullLoadReset_Post')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CoreEntities_A')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Core_A_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_A"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Core_A_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Core_A_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Script - Entity RowCount",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "Succeeded",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": {
																"value": "@activity('Script - Entity RowCount').output.outputParameters.RowCount",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Script - Entity RowCount",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().srcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().srcDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "RowCount",
																	"type": "Int32",
																	"value": null,
																	"direction": "Output"
																}
															],
															"type": "Query",
															"text": {
																"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Switch Entity",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Switch Entity_Officer_SourceSystem",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Account",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Account",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "accountnumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "accountnumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_city",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_city",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_county",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_county",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_fax",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_fax",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_line1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_line1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_line2",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_line2",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_line3",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_line3",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_postalcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_postalcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_primarycontactname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_primarycontactname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_telephone1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_telephone1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "creditlimit",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "creditlimit",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "description",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "description",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "emailaddress1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "emailaddress1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "fax",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "fax",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "numberofemployees",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "numberofemployees",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "telephone1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "telephone1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "transactioncurrencyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "transactioncurrencyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "customertypecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "customertypecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "accountcategorycode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "accountcategorycode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_addresstypecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "address1_addresstypecode",
																						"type": "Int32"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Account",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Account",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType\n",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Account').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Account",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Account",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Account' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Account').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Account').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Account').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Account').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Account').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Account').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Account').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																},
																{
																	"name": "Destination to Config",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "PipelineParameters LogEnd - Account",
																			"dependencyConditions": [
																				"Completed"
																			]
																		},
																		{
																			"activity": "PipelineAuditDetailLog_2 Account",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "CommonDataServiceForAppsSource",
																			"query": {
																				"value": "@item().FetchXML",
																				"type": "Expression"
																			}
																		},
																		"sink": {
																			"type": "SqlServerSink",
																			"writeBehavior": "upsert",
																			"upsertSettings": {
																				"useTempDB": true,
																				"keys": [
																					"phg_integrationkey"
																				]
																			},
																			"sqlWriterUseTableLock": false,
																			"tableOption": "autoCreate"
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": false
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_OnPrem_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"ServerName": {
																					"value": "@item().SrcServer",
																					"type": "Expression"
																				},
																				"DatabaseName": {
																					"value": "@item().SrcDatabase",
																					"type": "Expression"
																				},
																				"SchemaName": "d365",
																				"TableName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_3",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Destination to Config",
																			"dependencyConditions": [
																				"Succeeded"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														}
													]
												}
											},
											{
												"name": "Switch Entity_Officer_SourceSystem",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@concat(item().Entity, item().SrcSystem) ",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "OfficerFortis",
															"activities": [
																{
																	"name": "PipelineParameters LogEnd - Officer_F",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Officer_F",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "Trfd_to_Dest - Officer_F",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "fullname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "fullname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "firstname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "firstname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "lastname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "lastname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "title",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "title",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "jobtitle",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "jobtitle",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_telephone1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_telephone1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "mobilephone",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "mobilephone",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "internalemailaddress",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "internalemailaddress",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "domainname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "domainname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "businessunitid",
																						"type": "Guid"
																					},
																					"sink": {
																						"name": "businessunitid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_2 Officer_F",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Officer_F",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Officer_F' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Officer_F').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Officer_F').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Officer_F').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Officer_F').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Officer_F').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Officer_F').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Officer_F').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																},
																{
																	"name": "Destination to Config - Fortis",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "PipelineParameters LogEnd - Officer_F",
																			"dependencyConditions": [
																				"Completed"
																			]
																		},
																		{
																			"activity": "PipelineAuditDetailLog_2 Officer_F",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "CommonDataServiceForAppsSource",
																			"query": {
																				"value": "@item().FetchXML",
																				"type": "Expression"
																			}
																		},
																		"sink": {
																			"type": "SqlServerSink",
																			"writeBehavior": "upsert",
																			"upsertSettings": {
																				"useTempDB": true,
																				"keys": [
																					"phg_integrationkey"
																				]
																			},
																			"sqlWriterUseTableLock": false,
																			"tableOption": "autoCreate"
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "systemuserid",
																						"type": "Guid"
																					},
																					"sink": {
																						"name": "systemuserid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "string"
																					}
																				},
																				{
																					"source": {
																						"name": "fullname",
																						"type": "String"
																					},
																					"sink": {
																						"name": "fullname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "modifiedon",
																						"type": "DateTime"
																					},
																					"sink": {
																						"name": "modifiedon",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					}
																				}
																			]
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_OnPrem_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"ServerName": {
																					"value": "@item().SrcServer",
																					"type": "Expression"
																				},
																				"DatabaseName": {
																					"value": "@item().SrcDatabase",
																					"type": "Expression"
																				},
																				"SchemaName": "d365",
																				"TableName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_3 - Fortis",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Destination to Config - Fortis",
																			"dependencyConditions": [
																				"Succeeded"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config - Fortis').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config - Fortis').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config - Fortis').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config - Fortis').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config - Fortis').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config - Fortis').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "OfficerWaterloo",
															"activities": [
																{
																	"name": "PipelineParameters LogEnd - Officer_W",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Officer_W",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "Trfd_to_Dest - Officer_W",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "fullname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "fullname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "firstname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "firstname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "lastname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "lastname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "title",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "title",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "jobtitle",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "jobtitle",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "address1_telephone1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "address1_telephone1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "mobilephone",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "mobilephone",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "internalemailaddress",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "internalemailaddress",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "domainname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "domainname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "businessunitid",
																						"type": "Guid"
																					},
																					"sink": {
																						"name": "businessunitid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_2 Officer_W",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Officer_W",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Officer_W' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Officer_W').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Officer_W').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Officer_W').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Officer_W').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Officer_W').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Officer_W').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Officer_W').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																},
																{
																	"name": "Destination to Config - Waterloo",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "PipelineParameters LogEnd - Officer_W",
																			"dependencyConditions": [
																				"Completed"
																			]
																		},
																		{
																			"activity": "PipelineAuditDetailLog_2 Officer_W",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "CommonDataServiceForAppsSource",
																			"query": {
																				"value": "@item().FetchXML",
																				"type": "Expression"
																			}
																		},
																		"sink": {
																			"type": "SqlServerSink",
																			"writeBehavior": "upsert",
																			"upsertSettings": {
																				"useTempDB": true,
																				"keys": [
																					"phg_integrationkey"
																				]
																			},
																			"sqlWriterUseTableLock": false,
																			"tableOption": "autoCreate"
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "systemuserid",
																						"type": "Guid"
																					},
																					"sink": {
																						"name": "systemuserid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "string"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "string"
																					}
																				},
																				{
																					"source": {
																						"name": "fullname",
																						"type": "String"
																					},
																					"sink": {
																						"name": "fullname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "modifiedon",
																						"type": "DateTime"
																					},
																					"sink": {
																						"name": "modifiedon",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "Int32"
																					}
																				}
																			]
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_OnPrem_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"ServerName": {
																					"value": "@item().SrcServer",
																					"type": "Expression"
																				},
																				"DatabaseName": {
																					"value": "@item().SrcDatabase",
																					"type": "Expression"
																				},
																				"SchemaName": "d365",
																				"TableName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_3 - Waterloo",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Destination to Config - Waterloo",
																			"dependencyConditions": [
																				"Succeeded"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config - Waterloo').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config - Waterloo').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config - Waterloo').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config - Waterloo').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config - Waterloo').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config - Waterloo').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														}
													]
												}
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n'@{activity('Staging to Transformed').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "Datetime",
													"value": {
														"value": "@item().LastSuccessfulPipelineRunStart",
														"type": "Expression"
													}
												},
												"strLoadType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[C]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CoreEntities_B')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Core_B_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_B"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Core_B_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Core_B_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Script - Entity RowCount",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "Succeeded",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": {
																"value": "@activity('Script - Entity RowCount').output.outputParameters.RowCount",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Script - Entity RowCount",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().srcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().srcDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "RowCount",
																	"type": "Int32",
																	"value": null,
																	"direction": "Output"
																}
															],
															"type": "Query",
															"text": {
																"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Destination to Config",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Switch Entity",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "CommonDataServiceForAppsSource",
														"query": {
															"value": "@item().FetchXML",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "upsert",
														"upsertSettings": {
															"useTempDB": true,
															"keys": [
																"phg_integrationkey"
															]
														},
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": false
												},
												"inputs": [
													{
														"referenceName": "DS_Dataverse",
														"type": "DatasetReference",
														"parameters": {
															"EntityName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": "d365",
															"TableName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Switch Entity",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Property",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Property",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.00:10:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_addressline1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_addressline1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_addressline2",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_addressline2",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_addressline3",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_addressline3",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_addressline4",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_addresstowncity",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_blockreference",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_blockreference",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_builddate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_builddate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_buildtypeid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_buildtypeid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_dateoffinaldisposal",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_dateoffinaldisposal",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_electricmeterserialnumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_electricmeterserialnumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_estatecode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_estatecode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_floorplanurl",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_floorplanurl",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_fuelservicedate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_fuelservicedate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_heatingtypeid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_heatingtypeid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_gasmeterserialnumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_gasmeterserialnumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_managementareaid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_managementareaid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_maximumnumberofoccupants",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_maximumnumberofoccupants",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_numberofbathrooms",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_numberofbathrooms",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_numberofbedrooms",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_numberofbedrooms",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_numberoffloors",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_numberoffloors",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_numberofreceptionrooms",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_numberofreceptionrooms",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_ownedbycustomer",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_ownedbycustomer",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_ownedbyphg",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_ownedbyphg",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_parishid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_parishid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_plotnumber",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_plotnumber",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_postcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_postcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertyfloorlevel",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_propertyfloorlevel",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertystatus",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_propertystatus",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_substatus",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_substatus",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertytype",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_propertytype",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_subareacode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_subareacode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_uprn",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_uprn",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_wardcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_wardcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_sharedownership",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_sharedownership",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_lift",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_lift",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_anyadaptions",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_anyadaptions",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_parkingspace",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_parkingspace",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_cookersupply",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_cookersupply",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_garden",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_garden",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_gascapped",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_gascapped",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_indefectperiod",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_indefectperiod",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_nsom",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_nsom",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_formerarrearsofficer",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_formerarrearsofficer",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_estatesofficer",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_estatesofficer",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_arrearsofficer",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_arrearsofficer",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_rentofficer",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_rentofficer",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_repairsofficer",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_repairsofficer",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_surveyor",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_surveyor",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_operatingdivision",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_operatingdivision",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_localauthority",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_localauthority",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_areaid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_areaid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_subareaid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_subareaid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertydeveloper",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_propertydeveloper",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_repaircontractor",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_repaircontractor",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_gasservicer",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_gasservicer",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_waterauthority",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_waterauthority",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_systemorigin",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_systemorigin",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_righttopurchase",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_righttopurchase",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_internalblockaccessid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_internalblockaccessid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_blockid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_blockid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_landenvironmentid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_landenvironmentid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_ttotalcharges",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_ttotalcharges",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_rentcollector",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_rentcollector",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_joballowed",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_joballowed",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_placetype",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_placetype",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_tenancyid",
																						"type": "Guid"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Property",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Property",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Property').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Property",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Property",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Property' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Property').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Property').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Property').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Property').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Property').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Property').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Property').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "Tenancy",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Tenancy",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"validateDataConsistency": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_balance",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_balance",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_rentcharges",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_rentcharges",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_grossrent",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_grossrent",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_netcharge",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_netcharge",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_totalservicechargeamount",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_totalservicechargeamount",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_paymentmethod",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_paymentmethod",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_housingbenefitreceived",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_housingbenefitreceived",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_allpayref",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_allpayref",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancycategoryid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_tenancycategoryid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancyenddate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_tenancyenddate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancystartdate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_tenancystartdate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_expectedtenancyenddate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_expectedtenancyenddate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancytypeid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_tenancytypeid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_urn",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_urn",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_correspondenceaddress",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_correspondenceaddress",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_addresstype",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_addresstype",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_startdate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_startdate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_enddate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_enddate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "transactioncurrencyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "transactioncurrencyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_propertyid",
																						"type": "Guid"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Tenancy",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Tenancy",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Tenancy",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Tenancy",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Tenancy' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Tenancy').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Tenancy').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Tenancy').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Tenancy').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Tenancy').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Tenancy').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Tenancy').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "Contact",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Contact",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "donotbulkemail",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "donotbulkemail",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "donotemail",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "donotemail",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "donotphone",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "donotphone",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "donotpostalmail",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "donotpostalmail",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "preferredcontactmethodcode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "preferredcontactmethodcode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "emailaddress1",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "emailaddress1",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "firstname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "firstname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "fullname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "fullname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "lastname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "lastname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "middlename",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "middlename",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "mobilephone",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "mobilephone",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_age",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_age",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_dateofbirth",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_dateofbirth",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_dateofdeath",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_dateofdeath",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_ethnicgroup",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_ethnicgroup",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_nationaility",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_nationaility",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_ninumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_ninumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_previousname",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_previousname",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_relgion",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_relgion",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_sexuality",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_sexuality",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_doyouconsideryourselftobedisabled",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_doyouconsideryourselftobedisabled",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "telephone2",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "telephone2",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "gendercode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "gendercode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_systemorigin",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_systemorigin",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_primarytenancy",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_primarytenancy",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_primaryproperty",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_primaryproperty",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_personreferencenumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_personreferencenumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_emailaddresspriority",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_emailaddresspriority",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_homephonepriority",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_homephonepriority",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_mobilephonepriority",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_mobilephonepriority",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "salutation",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "salutation",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Contact",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Contact",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Contact",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Contact",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Contact' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Contact').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Contact').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Contact').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Contact').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Contact').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Contact').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Contact').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														}
													]
												}
											},
											{
												"name": "PipelineAuditDetailLog_3",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Destination to Config",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Switch Entity - Staging",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n'@{activity('Staging to Transformed').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Switch Entity - Staging",
												"type": "Switch",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Property",
															"activities": [
																{
																	"name": "Update - stg_phg_property",
																	"description": "updates the following fields \n\n [phg_indefectperiod]\n,[phg_nsom]\n,[phg_cookersupply]\n,[phg_gascapped]\n,[phg_fuelservicedate]\n\nin the [stg_phg_property] table",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[adf].[spUpdate_stg_phg_property]"
																	},
																	"linkedServiceName": {
																		"referenceName": "SqlServer_OnPrem",
																		"type": "LinkedServiceReference",
																		"parameters": {
																			"ServerName": {
																				"value": "@item().SrcServer",
																				"type": "Expression"
																			},
																			"DatabaseName": {
																				"value": "@item().srcDatabase",
																				"type": "Expression"
																			}
																		}
																	}
																}
															]
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "Datetime",
													"value": {
														"value": "@item().LastSuccessfulPipelineRunStart",
														"type": "Expression"
													}
												},
												"strLoadType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[C]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CoreEntities_C')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Core_C_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core_C"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Core_C_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Core_C_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Script - Entity RowCount",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "Succeeded",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": {
																"value": "@activity('Script - Entity RowCount').output.outputParameters.RowCount",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Script - Entity RowCount",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().srcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().srcDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "RowCount",
																	"type": "Int32",
																	"value": null,
																	"direction": "Output"
																}
															],
															"type": "Query",
															"text": {
																"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Destination to Config",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Switch Entity",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "CommonDataServiceForAppsSource",
														"query": {
															"value": "@item().FetchXML",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "upsert",
														"upsertSettings": {
															"useTempDB": true,
															"keys": [
																"phg_integrationkey"
															]
														},
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": false
												},
												"inputs": [
													{
														"referenceName": "DS_Dataverse",
														"type": "DatasetReference",
														"parameters": {
															"EntityName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": "d365",
															"TableName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Switch Entity",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "HousingAccount",
															"activities": [
																{
																	"name": "Trfd_to_Dest - HousingAccount",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_accountholder1",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_accountholder1",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_priority",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_priority",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_accountholder2",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_accountholder2",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_accounttypeid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_accounttypeid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_currentbalance",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_currentbalance",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_tenancyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_noticecourtactioninfo",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_noticecourtactioninfo",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_noticecourtactiondate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_noticecourtactiondate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_lastarrearsstageinfo",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_lastarrearsstageinfo",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_lastarrearsstagedate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_lastarrearsstagedate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_lastarrearsstagecode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_lastarrearsstagecode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "transactioncurrencyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "transactioncurrencyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - HousingAccount",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - HousingAccount",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 HousingAccount",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - HousingAccount",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - HousingAccount' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - HousingAccount').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - HousingAccount').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - HousingAccount').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - HousingAccount').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - HousingAccount').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - HousingAccount').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - HousingAccount').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "HouseholdMember",
															"activities": [
																{
																	"name": "Trfd_to_Dest - HouseholdMember",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_contactid",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_contactid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancyid",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_tenancyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_type",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_type",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_startdate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_startdate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_enddate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_enddate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - HouseholdMember",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - HouseholdMember",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 HouseholdMember",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - HouseholdMember",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - HouseholdMember' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - HouseholdMember').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - HouseholdMember').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "Warranty",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Warranty",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_description",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_description",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_expirydate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_expirydate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_propertyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_relation",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_relation",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_relationcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_relationcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_relationsubcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_selationsubcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_startdate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_startdate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_warrantycode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_warrantycode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_warrantytype",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_warrantytype",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_contractorid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_contractorid",
																						"type": "Guid"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Warranty",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Warranty",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Warranty",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Warranty",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Warranty' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Warranty').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Warranty').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Warranty').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Warranty').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Warranty').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Warranty').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Warranty').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "Component",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Component",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_componenttypeid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_componenttypeid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_make",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_make",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_model",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_model",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_propertyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_replacementcycledate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_replacementcycledate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_installationdate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_installationdate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Component",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Component",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Component').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Component",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Component",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Component' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Component').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Component').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Component').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Component').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Component').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Component').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Component').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "ServiceCharge",
															"activities": [
																{
																	"name": "Trfd_to_Dest - ServiceCharge",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_accountcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_accountcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_chargeused",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_chargeused",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_enddate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_enddate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_netamount",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_netamount",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_netdaily",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_netdaily",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_propertyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_propertyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_startdate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_startdate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_tenancyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_uprn",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_uprn",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_vatamount",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_vatamount",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_vatcode",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_vatcode",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_vatdaily",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_vatdaily",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_ishbeligible",
																						"type": "Boolean",
																						"physicalType": "Boolean"
																					},
																					"sink": {
																						"name": "phg_ishbeligible",
																						"type": "Boolean"
																					}
																				},
																				{
																					"source": {
																						"name": "transactioncurrencyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "transactioncurrencyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_contactid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_contactid",
																						"type": "Guid"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - ServiceCharge",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - ServiceCharge",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 ServiceCharge",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - ServiceCharge",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - ServiceCharge' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - ServiceCharge').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - ServiceCharge').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "VulnerabilityContact",
															"activities": [
																{
																	"name": "Trfd_to_Dest - VulnerabilityContact",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_contactid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_contactid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_vulnerabilityid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_vulnerabilityid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - VulnerabilityContact",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - VulnerabilityContact",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 VulnerabilityContact",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - VulnerabilityContact",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - VulnerabilityContact' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - VulnerabilityContact').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														}
													]
												}
											},
											{
												"name": "PipelineAuditDetailLog_3",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Destination to Config",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n'@{activity('Staging to Transformed').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "Datetime",
													"value": {
														"value": "@item().LastSuccessfulPipelineRunStart",
														"type": "Expression"
													}
												},
												"strLoadType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[C]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DailyReset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Control - Reset PipelineRunsToday - Daily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Config - Daily Reset",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[spUpdate_DailyReset]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[-]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Control - Reset PipelineRunsToday - Daily",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_PipelineRunsToday]"
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DeleteEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Delete"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Delete_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Delete_Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "Succeeded",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": null,
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Delete Entity Data",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.1:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "DF_DeleteEntityData",
														"type": "DataFlowReference",
														"parameters": {},
														"datasetParameters": {
															"DeletionData": {
																"Container": {
																	"value": "@item().DatalakeContainer",
																	"type": "Expression"
																},
																"Directory": {
																	"value": "@item().DatalakeDirectory_Transformed",
																	"type": "Expression"
																},
																"Filename": {
																	"value": "@item().DatalakeFilename",
																	"type": "Expression"
																}
															},
															"SinkDelete": {
																"EntityName": {
																	"value": "@item().DestEntity",
																	"type": "Expression"
																}
															}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "PipelineParameters LogEnd - DeleteEntityData",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Delete Entity Data",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@utcNow()",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "Succeeded",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": null,
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "PipelineAuditDetailLog_3",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Destination to Config",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n'@{activity('Destination to Config').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Destination to Config",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Delete Entity Data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "CommonDataServiceForAppsSource",
														"query": {
															"value": "@item().FetchXML",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"preCopyScript": {
															"value": "@{concat('truncate table d365.',item().DestEntity)}",
															"type": "Expression"
														},
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true
												},
												"inputs": [
													{
														"referenceName": "DS_Dataverse",
														"type": "DatasetReference",
														"parameters": {
															"EntityName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": "d365",
															"TableName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.00:10:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n'@{activity('Staging to Transformed').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Destination to Source - Prep",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@item().FetchXML",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table d365.',item().DestEntity)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Destination to Source - Prep",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "entity",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "Entity",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "phg_integrationkey",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "phg_integrationkey",
														"type": "String",
														"physicalType": "nvarchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[D]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited_Reference')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/dataflows/DF_DeleteEntityData')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EntityDuplicates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PipelineAuditLog - Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Staging to Transformed",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": "[[adf].[spGetCoreEntityDuplicates]",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SrcSystem",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "SrcSystem",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityView",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "EntityView",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityAttribute",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "EntityAttribute",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "AttributeValue",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "AttributeValue",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "AttributeDuplicates",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "AttributeDuplicates",
														"type": "Int32",
														"physicalType": "int"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "dbo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@concat(item().Pipeline, '/Duplicates/', item().srcSystem )",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(item().srcSystem,'_EntityDuplicates.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@concat(item().Pipeline, '/Duplicates/', item().srcSystem )",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(item().srcSystem,'_EntityDuplicates.csv')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Transformed to Control",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Staging to Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@concat('delete from [dbo].[SourceSystemEntityDuplicates] where SrcSystem = ''',item().srcSystem, '''' )",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SrcSystem",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SrcSystem",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityView",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EntityView",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityAttribute",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EntityAttribute",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "AttributeValue",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "AttributeValue",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "AttributeDuplicates",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "AttributeDuplicates",
														"type": "Int32",
														"physicalType": "int"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@concat(item().Pipeline, '/Duplicates/', item().srcSystem )",
													"type": "Expression"
												},
												"Filename": {
													"value": "@concat(item().srcSystem,'_EntityDuplicates.csv')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "SourceSystemEntityDuplicates"
											}
										}
									]
								},
								{
									"name": "PipelineAuditDetailLog_1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Staging to Transformed",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'-' as Source,\n'SourceSystemEntityDuplicates' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n0 as SequenceGroup\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "PipelineAuditDetailLog_2",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Transformed to Control",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'-' as Source,\n'SourceSystemEntityDuplicates' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Transformed to Control').output.rowsCopied}' as RowsCopied,\n'@{activity('Transformed to Control').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Transformed to Control').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Transformed to Control').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Transformed to Control').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Transformed to Control').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Transformed to Control').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Transformed to Control').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Transformed to Control').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Transformed to Control').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Transformed to Control').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Transformed to Control').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n0 as SequenceGroup\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"strSequenceList": {
									"value": "[[-]",
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages/Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FullLoadReset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulate_Sourcesystems",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PipelineAuditLog - Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulate_Sourcesystems]",
							"storedProcedureParameters": {
								"strEnvironment": {
									"value": {
										"value": "@pipeline().globalParameters.Environment",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulate_PipelineParameters",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulate_Sourcesystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulate_PipelineParameters]"
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "spPopulate_PipelineParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Truncate D365 Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[d365].[spTruncate_d365_tables]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().srcDatabase",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Truncate adf Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[spTruncate_adf_tables]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().srcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PurgePipelineAuditLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[-]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PurgePipelineAuditLog",
						"description": "Deletes data older than 30Days old\n\n- PipelineAuditLog\n-PipelineAuditDetailLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spDelete_PurgePipelineAuditLog]"
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select\t pp.Pipeline\n\t\t,pp.SrcSystem\n\t\t,pp.EntityType\n\t\t,pp.SrcServer\n\t\t,pp.SrcDatabase\n\t\t,pp.DestSchema\n\t\t,pp.DestEntity\n\t\t,pp.Entity\n\t\t,pp.UpsertKeyColumn\n\t\t,cast(replace(cast(pp.FetchXML as nvarchar(max)),'operator=\"last-x-hours\" value=\"1\"','operator=\"not-null\"') as xml) as FetchXML\n\t\t,pp.IsActive\nfrom\tdbo.PipelineParameters pp\nwhere\tisActive = 1\nand\t\tpp.EntityType in ('Reference', 'Core_A','Core_B','Core_C', 'Transactional')\n\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Entities').output.value\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Destination to Config",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@item().FetchXML",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', 'd365', '.', item().DestEntity )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PipelineAuditDetailLog_3",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Destination to Config",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().Entity}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n'@{activity('Destination to Config').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n0 as SequenceGroup\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FullLoadReset_Post')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PipelineAuditLog - Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Post Full Load - Checksum",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[d365].[spUpdate_PostFullLoad_Checksum]"
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_OnPrem",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@item().SrcServer",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@item().SrcDatabase",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[-]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-20T17:01:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_InactiveEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Inactive_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Inactive"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Inactive_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Inactive_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": "Succeeded",
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": null,
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Destination to Config",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Switch Entity",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "CommonDataServiceForAppsSource",
														"query": {
															"value": "@item().FetchXML",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "upsert",
														"upsertSettings": {
															"useTempDB": true,
															"keys": [
																"phg_integrationkey"
															]
														},
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": false
												},
												"inputs": [
													{
														"referenceName": "DS_Dataverse",
														"type": "DatasetReference",
														"parameters": {
															"EntityName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": "d365",
															"TableName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Switch Entity",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Transaction",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Transaction",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Transaction",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Transaction",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Transaction",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Transaction",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Transaction' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Transaction').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Transaction').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Transaction').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Transaction').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Transaction').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Transaction').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "DiaryNote",
															"activities": [
																{
																	"name": "Trfd_to_Dest - DiaryNote",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "statecode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statecode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "statuscode",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "statuscode",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_2 DiaryNote",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - DiaryNote",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - DiaryNote' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - DiaryNote').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - DiaryNote').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - DiaryNote').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - DiaryNote').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - DiaryNote').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - DiaryNote').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - DiaryNote",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - DiaryNote",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																}
															]
														}
													]
												}
											},
											{
												"name": "PipelineAuditDetailLog_3",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Destination to Config",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n'@{activity('Staging to Transformed').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Destination to Source - Prep",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "entity",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "Entity",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "phg_integrationkey",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "phg_integrationkey",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "statecode",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "statecode",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "statuscode",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "statuscode",
														"type": "Int32",
														"physicalType": "int"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Destination to Source - Prep",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@item().FetchXML",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table d365.',item().DestEntity)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[I]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LookupEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Lookup"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch Entity",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().Entity",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Transaction Currency",
												"activities": [
													{
														"name": "D365_TransactionCurrency to SQL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "CommonDataServiceForAppsSource",
																"query": {
																	"value": "@item().FetchXML",
																	"type": "Expression"
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"writeBehavior": "upsert",
																"upsertSettings": {
																	"useTempDB": false,
																	"keys": [
																		"transactioncurrencyid"
																	]
																},
																"sqlWriterUseTableLock": false,
																"tableOption": "autoCreate"
															},
															"enableStaging": false,
															"enableSkipIncompatibleRow": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "transactioncurrencyid",
																			"type": "Guid"
																		},
																		"sink": {
																			"name": "transactioncurrencyid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "isocurrencycode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "isocurrencycode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "currencyname",
																			"type": "String"
																		},
																		"sink": {
																			"name": "currencyname",
																			"type": "String"
																		}
																	}
																]
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Dataverse",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": "transactioncurrency"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().DestServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().DestDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().DestSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - TransactionCurrency",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - TransactionCurrency",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@{utcnow()}",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - TransactionCurrency').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "PipelineAuditDetailLog_2 TransactionCurrency",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "D365_TransactionCurrency to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcTable}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('D365_TransactionCurrency to SQL').output.rowsCopied}' as RowsCopied,\n'@{activity('D365_TransactionCurrency to SQL').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('D365_TransactionCurrency to SQL').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('D365_TransactionCurrency to SQL').output.copyDuration}' as CopyDuration_SS,\n'@{activity('D365_TransactionCurrency to SQL').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('D365_TransactionCurrency to SQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Script - Entity RowCount - TransactionCurrency",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "D365_TransactionCurrency to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											},
											{
												"value": "String Map",
												"activities": [
													{
														"name": "D365_Stringmap to SQL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "CommonDataServiceForAppsSource",
																"query": {
																	"value": "@item().FetchXML",
																	"type": "Expression"
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"writeBehavior": "upsert",
																"upsertSettings": {
																	"useTempDB": false,
																	"keys": [
																		"stringmapid"
																	]
																},
																"sqlWriterUseTableLock": false,
																"tableOption": "autoCreate"
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "attributename",
																			"type": "String"
																		},
																		"sink": {
																			"name": "attributename",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "attributevalue",
																			"type": "Int32"
																		},
																		"sink": {
																			"name": "attributevalue",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "objecttypecode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "objecttypecode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "value",
																			"type": "String"
																		},
																		"sink": {
																			"name": "value",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "stringmapid",
																			"type": "Guid"
																		},
																		"sink": {
																			"name": "stringmapid",
																			"type": "Guid"
																		}
																	}
																]
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Dataverse",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": "stringmap"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().DestServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().DestDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().DestSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - Stringmap",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - Stringmap",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@{utcnow()}",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('D365_Stringmap to SQL').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - Stringmap').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "PipelineAuditDetailLog_2 Stringmap",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "D365_Stringmap to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcTable}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('D365_Stringmap to SQL').output.rowsCopied}' as RowsCopied,\n'@{activity('D365_Stringmap to SQL').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('D365_Stringmap to SQL').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('D365_Stringmap to SQL').output.copyDuration}' as CopyDuration_SS,\n'@{activity('D365_Stringmap to SQL').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('D365_Stringmap to SQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Script - Entity RowCount - Stringmap",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "D365_Stringmap to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											},
											{
												"value": "Ref Entity Code Map",
												"activities": [
													{
														"name": "Reference Entity Code Map to SQL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "ExcelSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"preCopyScript": "truncate table adf.ReferenceEntityCodeMap",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "ID",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "ID",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "SourceSystem",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "SourceSystem",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "SourceSchema",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "SourceSchema",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "SourceTable",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "SourceTable",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "SourceCode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "SourceCode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "Entity",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "Entity",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "EntityQualifiedName",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "EntityQualifiedName",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "EntityCode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "EntityCode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "EntityValue",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "EntityValue",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "WaterlooCode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "WaterlooCode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "FortisCode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "FortisCode",
																			"type": "String"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Excel_ReferenceEntityCodeMap",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Config",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().DestServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().DestDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().DestSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - RefEntityCodeMap",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - Reference Entity Code Map",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@{utcnow()}",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - Reference Entity Code Map').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "PipelineAuditDetailLog_2 EntityCodeMap",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Reference Entity Code Map to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcTable}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Reference Entity Code Map to SQL').output.rowsCopied}' as RowsCopied,\n'@{activity('Reference Entity Code Map to SQL').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Reference Entity Code Map to SQL').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Reference Entity Code Map to SQL').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Reference Entity Code Map to SQL').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Reference Entity Code Map to SQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Script - Entity RowCount - Reference Entity Code Map",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "Reference Entity Code Map to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from adf.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											},
											{
												"value": "Business Unit",
												"activities": [
													{
														"name": "D365_BusinessUnit to SQL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "CommonDataServiceForAppsSource",
																"query": {
																	"value": "@item().FetchXML",
																	"type": "Expression"
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"writeBehavior": "upsert",
																"upsertSettings": {
																	"useTempDB": false,
																	"keys": [
																		"businessunitid"
																	]
																},
																"sqlWriterUseTableLock": false,
																"tableOption": "autoCreate"
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "businessunitid",
																			"type": "Guid"
																		},
																		"sink": {
																			"name": "businessunitid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "name",
																			"type": "String"
																		},
																		"sink": {
																			"name": "name",
																			"type": "String"
																		}
																	}
																]
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Dataverse",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": "businessunit"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().DestServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().DestDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().DestSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - BusinessUnit",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - BusinessUnit",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@{utcnow()}",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - BusinessUnit').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "PipelineAuditDetailLog_2 BusinessUnit",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "D365_BusinessUnit to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcTable}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('D365_BusinessUnit to SQL').output.rowsCopied}' as RowsCopied,\n'@{activity('D365_BusinessUnit to SQL').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('D365_BusinessUnit to SQL').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('D365_BusinessUnit to SQL').output.copyDuration}' as CopyDuration_SS,\n'@{activity('D365_BusinessUnit to SQL').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('D365_BusinessUnit to SQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Script - Entity RowCount - BusinessUnit",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "D365_BusinessUnit to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											},
											{
												"value": "Local Authorities",
												"activities": [
													{
														"name": "Local Authorities to SQL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "ExcelSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"preCopyScript": "truncate table adf.LocalAuthorities",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "PHGRef",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "PHGRef",
																			"type": "String",
																			"physicalType": "nvarchar"
																		}
																	},
																	{
																		"source": {
																			"name": "PAF_LocalAuthorityCode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "PAF_LocalAuthorityCode",
																			"type": "String",
																			"physicalType": "nvarchar"
																		}
																	},
																	{
																		"source": {
																			"name": "PAF_LocalAuthorityName",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "PAF_LocalAuthorityName",
																			"type": "String",
																			"physicalType": "nvarchar"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Excel_LocalAuthorities",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Config",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().DestServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().DestDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().DestSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - LocalAuthorities",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - Local Authorities",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@{utcnow()}",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('Local Authorities to SQL').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - Local Authorities').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "PipelineAuditDetailLog_2 LocalAuthorities",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Local Authorities to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcTable}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Local Authorities to SQL').output.rowsCopied}' as RowsCopied,\n'@{activity('Local Authorities to SQL').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Local Authorities to SQL').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Local Authorities to SQL').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Local Authorities to SQL').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Local Authorities to SQL').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Local Authorities to SQL').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Local Authorities to SQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Local Authorities to SQL').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Local Authorities to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Local Authorities to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Local Authorities to SQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Script - Entity RowCount - Local Authorities",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "Local Authorities to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from adf.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											},
											{
												"value": "System User",
												"activities": [
													{
														"name": "D365_SystemUser to SQL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "CommonDataServiceForAppsSource",
																"query": {
																	"value": "@item().FetchXML",
																	"type": "Expression"
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"writeBehavior": "upsert",
																"upsertSettings": {
																	"useTempDB": false,
																	"keys": [
																		"systemuserid"
																	]
																},
																"sqlWriterUseTableLock": false,
																"tableOption": "autoCreate"
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "systemuserid",
																			"type": "Guid"
																		},
																		"sink": {
																			"name": "systemuserid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "internalemailaddress",
																			"type": "String"
																		},
																		"sink": {
																			"name": "internalemailaddress",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "fullname",
																			"type": "String"
																		},
																		"sink": {
																			"name": "fullname",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "createdon",
																			"type": "DateTime"
																		},
																		"sink": {
																			"name": "createdon",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "createdby",
																			"type": "Guid"
																		},
																		"sink": {
																			"name": "createdby",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "modifiedon",
																			"type": "DateTime"
																		},
																		"sink": {
																			"name": "modifiedon",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "modifiedby",
																			"type": "Guid"
																		},
																		"sink": {
																			"name": "modifiedby",
																			"type": "String"
																		}
																	}
																]
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Dataverse",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": "systemuser"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().DestServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().DestDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().DestSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - SystemUser",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - SystemUser",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@{utcnow()}",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('D365_SystemUser to SQL').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - SystemUser').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "PipelineAuditDetailLog_2 SystemUser",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "D365_SystemUser to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcTable}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('D365_SystemUser to SQL').output.rowsCopied}' as RowsCopied,\n'@{activity('D365_SystemUser to SQL').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('D365_SystemUser to SQL').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('D365_SystemUser to SQL').output.copyDuration}' as CopyDuration_SS,\n'@{activity('D365_SystemUser to SQL').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('D365_SystemUser to SQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Script - Entity RowCount - SystemUser",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "D365_SystemUser to SQL",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[L]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel_ReferenceEntityCodeMap')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel_LocalAuthorities')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ReferenceEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Reference_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Reference"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Reference_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Reference_Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Destination to Config",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Switch Entity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@item().FetchXML",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"phg_integrationkey"
												]
											},
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "PipelineAuditDetailLog_3",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Destination to Config",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Destination to Config' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Destination to Config').output.rowsCopied}' as RowsCopied,\n'@{activity('Destination to Config').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Destination to Config').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Destination to Config').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Destination to Config').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Destination to Config').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Destination to Config').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Destination to Config').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Destination to Config').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Destination to Config').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n3 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "Datetime",
													"value": {
														"value": "@item().LastSuccessfulPipelineRunStart",
														"type": "Expression"
													}
												},
												"strLoadType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Switch Entity",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().Entity",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Vulnerability",
												"activities": [
													{
														"name": "Staging to Transformed - Vulnerability",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_code",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_code",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "destination",
																			"type": "String"
																		},
																		"sink": {
																			"name": "destination",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_waterloocode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_waterloocode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_fortiscode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_fortiscode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_category",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_category",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "statecode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "statecode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "statuscode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "statuscode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_checksum",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_checksum",
																			"type": "String"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_OnPrem_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@item().SrcServer",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@item().SrcDatabase",
																		"type": "Expression"
																	},
																	"SchemaName": {
																		"value": "@item().SrcSchema",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().SrcTable",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited_Reference_Vulnerability",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineAuditDetailLog_1 - Vulnerability",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Staging to Transformed - Vulnerability",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed - Vulnerability').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed - Vulnerability').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Staging to Transformed - Vulnerability').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed - Vulnerability').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed - Vulnerability').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed - Vulnerability').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "Transformed to Destination - Vulnerability",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Staging to Transformed - Vulnerability",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_code",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_code",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_fortiscode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_fortiscode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_waterloocode",
																			"type": "String"
																		},
																		"sink": {
																			"name": "phg_waterloocode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_category",
																			"type": "Int32"
																		},
																		"sink": {
																			"name": "phg_category",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "statecode",
																			"type": "Int32"
																		},
																		"sink": {
																			"name": "statecode",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "statuscode",
																			"type": "Int32"
																		},
																		"sink": {
																			"name": "statuscode",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_checksum",
																			"type": "Int32"
																		},
																		"sink": {
																			"name": "phg_checksum",
																			"type": "Int32"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited_Reference_Vulnerability",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "PipelineAuditDetailLog_2 - Vulnerability",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Transformed to Destination - Vulnerability",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Transformed to Destination - Vulnerability').output.rowsCopied}' as RowsCopied,\n'@{activity('Transformed to Destination - Vulnerability').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Transformed to Destination - Vulnerability').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Transformed to Destination - Vulnerability').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Transformed to Destination - Vulnerability').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"writeBehavior": "insert",
																"sqlWriterUseTableLock": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_SQL_Control",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_SQL_Control_Tbl",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": "dbo",
																	"TableName": "PipelineAuditDetailLog"
																}
															}
														]
													},
													{
														"name": "PipelineParameters LogEnd - Vulnerability",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Script - Entity RowCount - Vulnerability",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
															"storedProcedureParameters": {
																"dtLastPipelineRunEnd": {
																	"value": {
																		"value": "@utcNow()",
																		"type": "Expression"
																	},
																	"type": "DateTime"
																},
																"strEntity": {
																	"value": {
																		"value": "@item().Entity",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strEntityType": {
																	"value": {
																		"value": "@item().EntityType",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strLastPipelineRunStatus": {
																	"value": {
																		"value": "@{activity('Transformed to Destination - Vulnerability').output.executionDetails[0].status}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"strSourceSystem": {
																	"value": {
																		"value": "@item().SrcSystem",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intDestEntityRowCount": {
																	"value": {
																		"value": "@activity('Script - Entity RowCount - Vulnerability').output.outputParameters.RowCount",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Control",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "Script - Entity RowCount - Vulnerability",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "Transformed to Destination - Vulnerability",
																"dependencyConditions": [
																	"Completed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "SqlServer_OnPrem",
															"type": "LinkedServiceReference",
															"parameters": {
																"ServerName": {
																	"value": "@item().srcServer",
																	"type": "Expression"
																},
																"DatabaseName": {
																	"value": "@item().srcDatabase",
																	"type": "Expression"
																}
															}
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "RowCount",
																			"type": "Int32",
																			"value": null,
																			"direction": "Output"
																		}
																	],
																	"type": "Query",
																	"text": {
																		"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																		"type": "Expression"
																	}
																}
															],
															"scriptBlockExecutionTimeout": "02:00:00"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "phg_code",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_code",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_name",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_name",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_integrationkey",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_integrationkey",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "destination",
																	"type": "String"
																},
																"sink": {
																	"name": "destination",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_waterloocode",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_waterloocode",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_fortiscode",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_fortiscode",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "statecode",
																	"type": "String"
																},
																"sink": {
																	"name": "statecode",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "statuscode",
																	"type": "String"
																},
																"sink": {
																	"name": "statuscode",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_checksum",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_checksum",
																	"type": "String"
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited_Reference",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Transformed to Destination",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "CommonDataServiceForAppsSink",
														"writeBatchSize": 10,
														"writeBehavior": "upsert",
														"ignoreNullValues": false,
														"alternateKeyName": {
															"value": "@item().UpsertKeyColumn",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "phg_integrationkey",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_integrationkey",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_code",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_code",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_name",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_name",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_fortiscode",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_fortiscode",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "phg_waterloocode",
																	"type": "String"
																},
																"sink": {
																	"name": "phg_waterloocode",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "statecode",
																	"type": "Int32"
																},
																"sink": {
																	"name": "statecode",
																	"type": "Int32"
																}
															},
															{
																"source": {
																	"name": "statuscode",
																	"type": "Int32"
																},
																"sink": {
																	"name": "statuscode",
																	"type": "Int32"
																}
															},
															{
																"source": {
																	"name": "phg_checksum",
																	"type": "Int32"
																},
																"sink": {
																	"name": "phg_checksum",
																	"type": "Int32"
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited_Reference",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Dataverse",
														"type": "DatasetReference",
														"parameters": {
															"EntityName": {
																"value": "@item().DestEntity",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_2",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Transformed to Destination",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Transformed to Destination' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Transformed to Destination').output.rowsCopied}' as RowsCopied,\n'@{activity('Transformed to Destination').output.rowsRead}' as RowsRead,\n0 as RowsSkipped,\n'@{activity('Transformed to Destination').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Transformed to Destination').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Transformed to Destination').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Transformed to Destination').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Transformed to Destination').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Transformed to Destination').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Transformed to Destination').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Transformed to Destination').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Transformed to Destination').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Transformed to Destination').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Script - Entity RowCount",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@utcNow()",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": {
																"value": "@{activity('Transformed to Destination').output.executionDetails[0].status}",
																"type": "Expression"
															},
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": {
																"value": "@activity('Script - Entity RowCount').output.outputParameters.RowCount",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Script - Entity RowCount",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Transformed to Destination",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().srcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().srcDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "RowCount",
																	"type": "Int32",
																	"value": null,
																	"direction": "Output"
																}
															],
															"type": "Query",
															"text": {
																"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[R]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited_Reference')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited_Reference_Vulnerability')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TransactionalEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transactional_Entities",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Transactional"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Transactional_Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Transactional_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete Transformed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "PipelineParameters LogStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogStart]",
										"storedProcedureParameters": {
											"dtLastPipelineRunStart": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"guidLastPipelineRun": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"strEntity": {
												"value": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"type": "String"
											},
											"strSourceSystem": {
												"value": {
													"value": "@item().SrcSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"strEntityType": {
												"value": {
													"value": "@item().EntityType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Control",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If RowsCopied",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Delete Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('OH to Staging').output.rowsCopied,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PipelineParameters LogEnd",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Script - Entity RowCount",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
													"storedProcedureParameters": {
														"dtLastPipelineRunEnd": {
															"value": {
																"value": "@{utcnow()}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"strEntity": {
															"value": {
																"value": "@item().Entity",
																"type": "Expression"
															},
															"type": "String"
														},
														"strEntityType": {
															"value": {
																"value": "@item().EntityType",
																"type": "Expression"
															},
															"type": "String"
														},
														"strLastPipelineRunStatus": {
															"value": "Succeeded",
															"type": "String"
														},
														"strSourceSystem": {
															"value": {
																"value": "@item().SrcSystem",
																"type": "Expression"
															},
															"type": "String"
														},
														"intDestEntityRowCount": {
															"value": {
																"value": "@activity('Script - Entity RowCount').output.outputParameters.RowCount",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "Control",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Script - Entity RowCount",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SqlServer_OnPrem",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@item().srcServer",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@item().srcDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "RowCount",
																	"type": "Int32",
																	"value": null,
																	"direction": "Output"
																}
															],
															"type": "Query",
															"text": {
																"value": "@concat('select @RowCount = count(*) from d365.', item().DestEntity)",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Switch Entity",
												"type": "Switch",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Transaction",
															"activities": [
																{
																	"name": "Trfd_to_Dest - Transaction",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_balance",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_balance",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_charges",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_charges",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_date",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_date",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_debit",
																						"type": "Decimal",
																						"physicalType": "Decimal"
																					},
																					"sink": {
																						"name": "phg_debit",
																						"type": "Decimal"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_transactionnumber",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_transactionnumber",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_transactiontypeid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_transactiontypeid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "transactioncurrencyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "transactioncurrencyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_accountid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_accountid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_breakdownnumber",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_breakdownnumber",
																						"type": "Int32"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - Transaction",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Transaction",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																},
																{
																	"name": "PipelineAuditDetailLog_2 Transaction",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - Transaction",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - Transaction' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - Transaction').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - Transaction').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - Transaction').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - Transaction').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - Transaction').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - Transaction').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - Transaction').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																}
															]
														},
														{
															"value": "DiaryNote",
															"activities": [
																{
																	"name": "Trfd_to_Dest - DiaryNote",
																	"type": "Copy",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "DelimitedTextSource",
																			"storeSettings": {
																				"type": "AzureBlobFSReadSettings",
																				"recursive": true,
																				"enablePartitionDiscovery": false
																			},
																			"formatSettings": {
																				"type": "DelimitedTextReadSettings"
																			}
																		},
																		"sink": {
																			"type": "CommonDataServiceForAppsSink",
																			"writeBatchSize": 10,
																			"writeBehavior": "upsert",
																			"ignoreNullValues": false,
																			"alternateKeyName": {
																				"value": "@item().UpsertKeyColumn",
																				"type": "Expression"
																			}
																		},
																		"enableStaging": false,
																		"enableSkipIncompatibleRow": true,
																		"translator": {
																			"type": "TabularTranslator",
																			"mappings": [
																				{
																					"source": {
																						"name": "phg_accountid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_accountid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_contactid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_contactid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_entrydate",
																						"type": "DateTime",
																						"physicalType": "DateTime"
																					},
																					"sink": {
																						"name": "phg_entrydate",
																						"type": "DateTime"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_entrystatus",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_entrystatus",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_entrytext",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_entrytext",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_entrytype",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_entrytype",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_referencetype",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_referencetype",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_integrationkey",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_integrationkey",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_name",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_name",
																						"type": "String"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_sequence",
																						"type": "Int32",
																						"physicalType": "Int32"
																					},
																					"sink": {
																						"name": "phg_sequence",
																						"type": "Int32"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_tenancyid",
																						"type": "Guid",
																						"physicalType": "Guid"
																					},
																					"sink": {
																						"name": "phg_tenancyid",
																						"type": "Guid"
																					}
																				},
																				{
																					"source": {
																						"name": "phg_checksum",
																						"type": "String",
																						"physicalType": "String"
																					},
																					"sink": {
																						"name": "phg_checksum",
																						"type": "String"
																					}
																				}
																			],
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_Datalake_PipeDelimited",
																			"type": "DatasetReference",
																			"parameters": {
																				"Container": {
																					"value": "@item().DatalakeContainer",
																					"type": "Expression"
																				},
																				"Directory": {
																					"value": "@item().DatalakeDirectory_Transformed",
																					"type": "Expression"
																				},
																				"Filename": {
																					"value": "@item().DatalakeFilename",
																					"type": "Expression"
																				}
																			}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_Dataverse",
																			"type": "DatasetReference",
																			"parameters": {
																				"EntityName": {
																					"value": "@item().DestEntity",
																					"type": "Expression"
																				}
																			}
																		}
																	]
																},
																{
																	"name": "PipelineAuditDetailLog_2 DiaryNote",
																	"type": "Copy",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - DiaryNote",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"source": {
																			"type": "AzureSqlSource",
																			"sqlReaderQuery": {
																				"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Trfd_to_Dest - DiaryNote' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Trfd_to_Dest - DiaryNote').output.rowsCopied}' as RowsCopied,\n'@{activity('Trfd_to_Dest - DiaryNote').output.rowsRead}' as RowsRead,\n'@{activity('Trfd_to_Dest - DiaryNote').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Trfd_to_Dest - DiaryNote').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Trfd_to_Dest - DiaryNote').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Trfd_to_Dest - DiaryNote').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n2 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n\n",
																				"type": "Expression"
																			},
																			"queryTimeout": "02:00:00",
																			"partitionOption": "None"
																		},
																		"sink": {
																			"type": "AzureSqlSink",
																			"writeBehavior": "insert",
																			"sqlWriterUseTableLock": false
																		},
																		"enableStaging": false,
																		"translator": {
																			"type": "TabularTranslator",
																			"typeConversion": true,
																			"typeConversionSettings": {
																				"allowDataTruncation": true,
																				"treatBooleanAsNumber": false
																			}
																		}
																	},
																	"inputs": [
																		{
																			"referenceName": "DS_SQL_Control",
																			"type": "DatasetReference",
																			"parameters": {}
																		}
																	],
																	"outputs": [
																		{
																			"referenceName": "DS_SQL_Control_Tbl",
																			"type": "DatasetReference",
																			"parameters": {
																				"SchemaName": "dbo",
																				"TableName": "PipelineAuditDetailLog"
																			}
																		}
																	]
																},
																{
																	"name": "PipelineParameters LogEnd - DiaryNote",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [
																		{
																			"activity": "Trfd_to_Dest - DiaryNote",
																			"dependencyConditions": [
																				"Completed"
																			]
																		}
																	],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[dbo].[spUpdate_PipelineParameters_LogEnd]",
																		"storedProcedureParameters": {
																			"dtLastPipelineRunEnd": {
																				"value": {
																					"value": "@{utcnow()}",
																					"type": "Expression"
																				},
																				"type": "DateTime"
																			},
																			"strEntity": {
																				"value": {
																					"value": "@item().Entity",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strEntityType": {
																				"value": {
																					"value": "@item().EntityType",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strLastPipelineRunStatus": {
																				"value": {
																					"value": "@{activity('Trfd_to_Dest - DiaryNote').output.executionDetails[0].status}",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"strSourceSystem": {
																				"value": {
																					"value": "@item().SrcSystem",
																					"type": "Expression"
																				},
																				"type": "String"
																			},
																			"intDestEntityRowCount": {
																				"value": null,
																				"type": "Int32"
																			}
																		}
																	},
																	"linkedServiceName": {
																		"referenceName": "Control",
																		"type": "LinkedServiceReference"
																	}
																}
															]
														}
													]
												}
											},
											{
												"name": "Staging to Transformed",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Entity - Staging",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_OnPrem_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@item().SrcServer",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@item().SrcDatabase",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@item().SrcSchema",
																"type": "Expression"
															},
															"TableName": {
																"value": "@item().SrcTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Datalake_PipeDelimited",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@item().DatalakeContainer",
																"type": "Expression"
															},
															"Directory": {
																"value": "@item().DatalakeDirectory_Transformed",
																"type": "Expression"
															},
															"Filename": {
																"value": "@item().DatalakeFilename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "PipelineAuditDetailLog_1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Staging to Transformed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'Staging to Transformed' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('Staging to Transformed').output.rowsCopied}' as RowsCopied,\n'@{activity('Staging to Transformed').output.rowsRead}' as RowsRead,\n'@{activity('Staging to Transformed').output.rowsSkipped}' as RowsSkipped,\n'@{activity('Staging to Transformed').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Staging to Transformed').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Staging to Transformed').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('Staging to Transformed').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Staging to Transformed').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Staging to Transformed').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Staging to Transformed').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Staging to Transformed').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n1 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_Control",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_SQL_Control_Tbl",
														"type": "DatasetReference",
														"parameters": {
															"SchemaName": "dbo",
															"TableName": "PipelineAuditDetailLog"
														}
													}
												]
											},
											{
												"name": "Entity - Staging",
												"type": "Switch",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"on": {
														"value": "@item().Entity",
														"type": "Expression"
													},
													"cases": [
														{
															"value": "Transaction",
															"activities": [
																{
																	"name": "Update - stg_phg_transaction",
																	"description": "updates the [phg_balance] field in the [stg_phg_transaction] table",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[adf].[spUpdate_stg_phg_transaction]"
																	},
																	"linkedServiceName": {
																		"referenceName": "SqlServer_OnPrem",
																		"type": "LinkedServiceReference",
																		"parameters": {
																			"ServerName": {
																				"value": "@item().SrcServer",
																				"type": "Expression"
																			},
																			"DatabaseName": {
																				"value": "@item().srcDatabase",
																				"type": "Expression"
																			}
																		}
																	}
																}
															]
														},
														{
															"value": "DiaryNote",
															"activities": [
																{
																	"name": "Update - stg_phg_diarynote",
																	"description": "updates the [phg_entrytext] field in the [stg_phg_diarynote] table",
																	"type": "SqlServerStoredProcedure",
																	"dependsOn": [],
																	"policy": {
																		"timeout": "0.12:00:00",
																		"retry": 0,
																		"retryIntervalInSeconds": 30,
																		"secureOutput": false,
																		"secureInput": false
																	},
																	"userProperties": [],
																	"typeProperties": {
																		"storedProcedureName": "[[adf].[spUpdate_stg_phg_diarynote]"
																	},
																	"linkedServiceName": {
																		"referenceName": "SqlServer_OnPrem",
																		"type": "LinkedServiceReference",
																		"parameters": {
																			"ServerName": {
																				"value": "@item().SrcServer",
																				"type": "Expression"
																			},
																			"DatabaseName": {
																				"value": "@item().srcDatabase",
																				"type": "Expression"
																			}
																		}
																	}
																}
															]
														}
													],
													"defaultActivities": [
														{
															"name": "Wait1",
															"type": "Wait",
															"dependsOn": [],
															"userProperties": [],
															"typeProperties": {
																"waitTimeInSeconds": 1
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "PipelineAuditDetailLog_0",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OH to Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n\n'@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n\n'@{item().SrcSystem}' as SrcSystem,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'OH to Staging' as CopyActivity,\n\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n\n'@{activity('OH to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('OH to Staging').output.rowsRead}' as RowsRead,\n'@{activity('OH to Staging').output.rowsSkipped}' as RowsSkipped,\n'@{activity('OH to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('OH to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('OH to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n\n'@{activity('OH to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('OH to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('OH to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('OH to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('OH to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS,\n0 as CopyActivity_Stage,\n'@{pipeline().parameters.SequenceGroup}' as SequenceGroup\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineAuditDetailLog"
											}
										}
									]
								},
								{
									"name": "OH to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "PipelineParameters LogStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "Datetime",
													"value": {
														"value": "@item().LastSuccessfulPipelineRunStart",
														"type": "Expression"
													}
												},
												"strLoadType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.LoadType",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().SrcSchema, '.', item().SrcTable )}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().srcSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SrcTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "RunStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunStart",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunEnd",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunEnd",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Duration_SS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunEnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Duration_SS",
							"value": {
								"value": "@string(div(sub(ticks(formatDateTime(variables('RunEnd'))),ticks(formatDateTime(variables('RunStart')))),10000000))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineAuditLog - Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsert_PipelineAuditLog_Start]",
							"storedProcedureParameters": {
								"dtRunStart": {
									"value": {
										"value": "@variables('RunStart')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"dtTriggerTime": {
									"value": {
										"value": "@{pipeline().TriggerTime}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"strDataFactory": {
									"value": {
										"value": "@{pipeline().DataFactory}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strPipeline": {
									"value": {
										"value": "@{pipeline().Pipeline}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strStatus": {
									"value": "In Progress",
									"type": "String"
								},
								"strTriggeredByPipelineName": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggeredByPipelineRunID": {
									"value": {
										"value": "@{pipeline()?.TriggeredByPipelineRunId}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerName": {
									"value": {
										"value": "@{pipeline().TriggerName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"strTriggerType": {
									"value": {
										"value": "@{pipeline().TriggerType}",
										"type": "Expression"
									},
									"type": "String"
								},
								"uniqGroupID": {
									"value": {
										"value": "@{pipeline().GroupId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqRunID": {
									"value": {
										"value": "@{pipeline().RunId}",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"uniqTriggerID": {
									"value": {
										"value": "@guid()",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"strSequenceList": {
									"value": "[[T]",
									"type": "String"
								},
								"strLoadType": {
									"value": {
										"value": "@pipeline().parameters.LoadType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Duration_SS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@variables('RunEnd')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": {
										"value": "@variables('Duration_SS')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"strStatus": {
									"value": "Succeeded",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PipelineAuditLog - End - Failed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Entity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdate_PipelineAuditLog_End]",
							"storedProcedureParameters": {
								"dtRunEnd": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"intDuration_SS": {
									"value": "0",
									"type": "Int32"
								},
								"strStatus": {
									"value": "Failed",
									"type": "String"
								},
								"uniqRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Control",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					},
					"LoadType": {
						"type": "string"
					}
				},
				"variables": {
					"RunStart": {
						"type": "String"
					},
					"RunEnd": {
						"type": "String"
					},
					"Duration_SS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-19T16:58:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/linkedServices/Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited_Reference')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_code",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					},
					{
						"name": "destination",
						"type": "String"
					},
					{
						"name": "phg_waterloocode",
						"type": "String"
					},
					{
						"name": "phg_fortiscode",
						"type": "String"
					},
					{
						"name": "modified",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					},
					{
						"name": "statecode",
						"type": "String"
					},
					{
						"name": "statuscode",
						"type": "String"
					},
					{
						"name": "phg_checksum",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited_Reference_Vulnerability')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_code",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					},
					{
						"name": "destination",
						"type": "String"
					},
					{
						"name": "phg_waterloocode",
						"type": "String"
					},
					{
						"name": "phg_fortiscode",
						"type": "String"
					},
					{
						"name": "phg_category",
						"type": "String"
					},
					{
						"name": "modified",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					},
					{
						"name": "statecode",
						"type": "String"
					},
					{
						"name": "statuscode",
						"type": "String"
					},
					{
						"name": "phg_checksum",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Dataverse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"EntityName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": {
						"value": "@dataset().EntityName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel_LocalAuthorities')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "data-sync"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "OH_D365_DataSync/Config"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "LocalAuthorities_F.xlsx"
					}
				},
				"folder": {
					"name": "DataLake/Config"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "LocalAuthorities",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "SourceSystem",
						"type": "String"
					},
					{
						"name": "SourceSchema",
						"type": "String"
					},
					{
						"name": "SourceTable",
						"type": "String"
					},
					{
						"name": "SourceCode",
						"type": "String"
					},
					{
						"name": "Entity",
						"type": "String"
					},
					{
						"name": "EntityQualifiedName",
						"type": "String"
					},
					{
						"name": "EntityCode",
						"type": "String"
					},
					{
						"name": "EntityValue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel_ReferenceEntityCodeMap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "data-sync"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "OH_D365_DataSync/Config"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "ReferenceEntityCodeMap.xlsx"
					}
				},
				"folder": {
					"name": "DataLake/Config"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ReferenceEntityCodeMap",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "SourceSystem",
						"type": "String"
					},
					{
						"name": "SourceSchema",
						"type": "String"
					},
					{
						"name": "SourceTable",
						"type": "String"
					},
					{
						"name": "SourceCode",
						"type": "String"
					},
					{
						"name": "Entity",
						"type": "String"
					},
					{
						"name": "EntityQualifiedName",
						"type": "String"
					},
					{
						"name": "EntityCode",
						"type": "String"
					},
					{
						"name": "EntityValue",
						"type": "String"
					},
					{
						"name": "WaterlooCode",
						"type": "String"
					},
					{
						"name": "FortisCode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Control",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Control_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Control",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_OnPrem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_OnPrem_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_OnPrem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "co_parish"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Control')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Control_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataverse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://phg-uat.crm11.dynamics.com/",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalId": "[parameters('Dataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('Dataverse_servicePrincipalCredential')]"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_OnPrem_connectionString')]",
					"userName": "[parameters('SqlServer_OnPrem_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer_OnPrem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "BBP-Pro2SQL-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/BBP-Pro2SQL-01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_S_4am_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"Sequence List: [R],[L],[C],[T]"
				],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Control",
							"type": "PipelineReference"
						},
						"parameters": {
							"PipelineName": "[parameters('TRG_S_4am_Daily_properties_PL_Control_parameters_PipelineName')]",
							"SequenceList": "[parameters('TRG_S_4am_Daily_properties_PL_Control_parameters_SequenceList')]",
							"LoadType": "[parameters('TRG_S_4am_Daily_properties_PL_Control_parameters_LoadType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-20T06:00:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_S_7am_to_5pm_Incremental')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"Sequence List: [C],[T]"
				],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Control",
							"type": "PipelineReference"
						},
						"parameters": {
							"PipelineName": "[parameters('TRG_S_7am_to_5pm_Incremental_properties_PL_Control_parameters_PipelineName')]",
							"SequenceList": "[parameters('TRG_S_7am_to_5pm_Incremental_properties_PL_Control_parameters_SequenceList')]",
							"LoadType": "[parameters('TRG_S_7am_to_5pm_Incremental_properties_PL_Control_parameters_LoadType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-20T17:36:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0,
								30
							],
							"hours": [
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_S_8pm_Incremental')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"Sequence List: [D],[I]"
				],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Control",
							"type": "PipelineReference"
						},
						"parameters": {
							"PipelineName": "[parameters('TRG_S_8pm_Incremental_properties_PL_Control_parameters_PipelineName')]",
							"SequenceList": "[parameters('TRG_S_8pm_Incremental_properties_PL_Control_parameters_SequenceList')]",
							"LoadType": "[parameters('TRG_S_8pm_Incremental_properties_PL_Control_parameters_LoadType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-20T09:07:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BBP-Pro2SQL-01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('BBP-Pro2SQL-01_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DeleteEntityData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "DeletionData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Dataverse",
								"type": "DatasetReference"
							},
							"name": "SinkDelete"
						}
					],
					"transformations": [
						{
							"name": "AlterRowProperty"
						},
						{
							"name": "SelectColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Entity as string,",
						"          phg_integrationkey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeletionData",
						"SelectColumn alterRow(deleteIf(true())) ~> AlterRowProperty",
						"DeletionData select(mapColumn(",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumn",
						"AlterRowProperty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     alternateKeyName: 'phg_integrationkey',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0) ~> SinkDelete"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse')]"
			]
		}
	]
}